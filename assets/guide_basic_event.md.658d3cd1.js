import{_ as s,c as a,o as n,O as l}from"./chunks/framework.d7e37bdc.js";const F=JSON.parse('{"title":"事件 (Event)","description":"","frontmatter":{},"headers":[],"relativePath":"guide/basic/event.md","filePath":"guide/basic/event.md","lastUpdated":1677953005000}'),p={name:"guide/basic/event.md"},o=l(`<h1 id="事件-event" tabindex="-1">事件 (Event) <a class="header-anchor" href="#事件-event" aria-label="Permalink to &quot;事件 (Event)&quot;">​</a></h1><p>Flandre 中存在着许许多多的事件，监控着应用内各项数据的流动。</p><p>在一个插件中，我们可以十分方便地通过重写插件方法的方式来订阅一个事件：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExamplePlugin</span><span style="color:#E1E4E8;"> : </span><span style="color:#B392F0;">Plugin</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/// &lt;</span><span style="color:#85E89D;">summary</span><span style="color:#6A737D;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/// 每次收到消息时触发。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/// &lt;/</span><span style="color:#85E89D;">summary</span><span style="color:#6A737D;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">override</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Task</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OnMessageReceived</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">MessageContext</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ctx</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果消息文本为 &quot;Hello!&quot;，</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ctx.Message.</span><span style="color:#B392F0;">GetText</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello!&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 则发送一条 &quot;World!&quot; 消息作为回复。</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> ctx.Bot.</span><span style="color:#B392F0;">SendMessage</span><span style="color:#E1E4E8;">(ctx.Message, </span><span style="color:#9ECBFF;">&quot;World!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">builder.</span><span style="color:#B392F0;">AddPlugin</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ExamplePlugin</span><span style="color:#E1E4E8;">&gt;();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExamplePlugin</span><span style="color:#24292E;"> : </span><span style="color:#6F42C1;">Plugin</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/// &lt;</span><span style="color:#22863A;">summary</span><span style="color:#6A737D;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/// 每次收到消息时触发。</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/// &lt;/</span><span style="color:#22863A;">summary</span><span style="color:#6A737D;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">override</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Task</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OnMessageReceived</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">MessageContext</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ctx</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果消息文本为 &quot;Hello!&quot;，</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (ctx.Message.</span><span style="color:#6F42C1;">GetText</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello!&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 则发送一条 &quot;World!&quot; 消息作为回复。</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> ctx.Bot.</span><span style="color:#6F42C1;">SendMessage</span><span style="color:#24292E;">(ctx.Message, </span><span style="color:#032F62;">&quot;World!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">builder.</span><span style="color:#6F42C1;">AddPlugin</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">ExamplePlugin</span><span style="color:#24292E;">&gt;();</span></span></code></pre></div><p>如果想要使用更加传统的 <code>+=</code> 式事件订阅方式，Flandre 同样支持，只是可能更加麻烦：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">app.Bots.</span><span style="color:#B392F0;">ForEach</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">bot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    bot.OnMessageReceived </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">bot</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> });</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">app.Bots.</span><span style="color:#6F42C1;">ForEach</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">bot</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    bot.OnMessageReceived </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">bot</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> });</span></span></code></pre></div>`,6),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const g=s(p,[["render",t]]);export{F as __pageData,g as default};
