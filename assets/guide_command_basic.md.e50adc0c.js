import{_ as s,c as n,o as a,a as l}from"./app.502e5375.js";const u=JSON.parse('{"title":"认识指令","description":"","frontmatter":{},"headers":[],"relativePath":"guide/command/basic.md","lastUpdated":1677953005000}'),p={name:"guide/command/basic.md"},o=l(`<h1 id="认识指令" tabindex="-1">认识指令 <a class="header-anchor" href="#认识指令" aria-hidden="true">#</a></h1><p>指令是一个机器人的灵魂。指令系统是整个 Flandre 框架中最精华的部分，也是灵活度最高的部分。通过指令，开发者无需再繁琐地在事件处理里写判断逻辑，仅需简单的定义就能方便掌握用户提供的参数信息。</p><p>一条指令必须定义在一个插件里，并使用 <code>[Command]</code> 特性标注：</p><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki github-dark vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ExamplePlugin</span><span style="color:#E1E4E8;"> : </span><span style="color:#B392F0;">Plugin</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#B392F0;">Command</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OnTest</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">CommandContext</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">age</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">$&quot;Name: {</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}, Age: {</span><span style="color:#E1E4E8;">age</span><span style="color:#9ECBFF;">}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">builder.</span><span style="color:#B392F0;">AddPlugin</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ExamplePlugin</span><span style="color:#E1E4E8;">&gt;();</span></span>
<span class="line"></span></code></pre><pre class="shiki github-light vp-code-light" tabindex="0"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ExamplePlugin</span><span style="color:#24292E;"> : </span><span style="color:#6F42C1;">Plugin</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    [</span><span style="color:#6F42C1;">Command</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;">)]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OnTest</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">CommandContext</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ctx</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">age</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$&quot;Name: {</span><span style="color:#24292E;">name</span><span style="color:#032F62;">}, Age: {</span><span style="color:#24292E;">age</span><span style="color:#032F62;">}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">builder.</span><span style="color:#6F42C1;">AddPlugin</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">ExamplePlugin</span><span style="color:#24292E;">&gt;();</span></span>
<span class="line"></span></code></pre></div><p>Flandre 会自动解析指令方法的参数列表，在用户调用指令时，便会在解析成功后，将解析结果自动作为实参传入该方法。</p>`,5),e=[o];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const m=s(p,[["render",t]]);export{u as __pageData,m as default};
