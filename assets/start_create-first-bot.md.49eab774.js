import{_ as p,c as e,b as s,d as a,e as l,a as o,o as r,r as c}from"./app.3f6d5495.js";const E=JSON.parse('{"title":"创建你的第一个 Bot","description":"","frontmatter":{},"headers":[{"level":2,"title":"设置环境","slug":"设置环境","link":"#设置环境","children":[]},{"level":2,"title":"创建应用","slug":"创建应用","link":"#创建应用","children":[]},{"level":2,"title":"分析我们的程序","slug":"分析我们的程序","link":"#分析我们的程序","children":[]}],"relativePath":"start/create-first-bot.md","lastUpdated":1670095480000}'),B={name:"start/create-first-bot.md"},t=o(`<h1 id="创建你的第一个-bot" tabindex="-1">创建你的第一个 Bot <a class="header-anchor" href="#创建你的第一个-bot" aria-hidden="true">#</a></h1><p>本章将会以一个简单的 QQ 机器人为例，介绍最基本的 Bot 搭建过程，来带领你初步认识 Flandre。</p><h2 id="设置环境" tabindex="-1">设置环境 <a class="header-anchor" href="#设置环境" aria-hidden="true">#</a></h2><p>Flandre 最低需要 .NET 6 环境，使用前请确保自己的 .NET 版本没有过低。</p><p>使用你喜欢的 IDE 或编辑器，创建一个新的控制台项目，并添加 NuGet 包引用。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>首先添加 <code>Flandre.Framework</code> 包，这是搭建一个 Flandre 应用所需要的基本框架。另外，为了使我们的 Bot 能够成功在平台上正常工作，你需要添加一个适配器。这里使用 <code>Flandre.Adapters.Konata</code>（QQ 协议的 .NET 实现，基于 <a href="https://github.com/KonataDev/Konata.Core" target="_blank" rel="noreferrer">Konata.Core</a>）作为演示。</p></div><h2 id="创建应用" tabindex="-1">创建应用 <a class="header-anchor" href="#创建应用" aria-hidden="true">#</a></h2><p>打开 <code>Program.cs</code>，写下以下代码：</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Flandre</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Framework</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Flandre</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Framework</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Common</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Flandre</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Adapters</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Konata</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">using</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Konata</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Core</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Common</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">builder</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">FlandreAppBuilder</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 添加 Bot 配置</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">KonataAdapterConfig</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Bots</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">KonataBotConfig</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">KeyStore</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">BotKeyStore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&lt;QQ 号&gt;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&lt;密码&gt;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">builder</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">UseAdapter</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">KonataAdapter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">UsePlugin</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">ExamplePlugin</span><span style="color:#ABB2BF;">&gt;()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">Build</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Run</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ExamplePlugin</span><span style="color:#ABB2BF;"> : </span><span style="color:#E5C07B;">Plugin</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">override</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Task</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">OnMessageReceived</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MessageContext</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        =&gt; </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Bot</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SendMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>以上内容构成了一个最简单的复读小程序。</p><h2 id="分析我们的程序" tabindex="-1">分析我们的程序 <a class="header-anchor" href="#分析我们的程序" aria-hidden="true">#</a></h2><p>首先引入命名空间，不必多说。其次，我们创建了一个新的 <code>FlandreAppBuilder</code> 实例，是我们应用的基本构造器。在一个 <code>FlandreAppBuilder</code> 实例里，我们可以添加插件、适配器等一系列基础服务。</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">builder</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">FlandreAppBuilder</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们接着创建了 <code>Konata</code> 适配器的配置对象，并将 Bot 信息添加到其中。</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">KonataAdapterConfig</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">config</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Bots</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Add</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">KonataBotConfig</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">KeyStore</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">BotKeyStore</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;&lt;QQ 号&gt;&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;&lt;密码&gt;&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>由于 C# 的顶层语句限制，我们只能在文件最后定义类。这里由于逻辑优先关系，我们先讲解这个类。</p></div><p>我们在文件末端创建了一个新的插件类，并继承了 <code>Plugin</code> 基类。在其中，我们重写了基类的 <code>OnMessageReceived</code> 方法，接受消息并调用 Bot 的发送消息接口，原路发送回去。每当 Bot 收到消息时，该方法就会被调用。</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ExamplePlugin</span><span style="color:#ABB2BF;"> : </span><span style="color:#E5C07B;">Plugin</span></span>
<span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">override</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">OnMessageReceived</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MessageContext</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">        =&gt; </span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Bot</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">SendMessage</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ctx</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Message</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>然后，在 <code>builder</code> 实例上注册适配器和我们自定义的插件，并构造为实际的 <code>FlandreApp</code> 实例：</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">builder</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">UseAdapter</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">KonataAdapter</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">config</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">UsePlugin</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">ExamplePlugin</span><span style="color:#ABB2BF;">&gt;()</span></span>
<span class="line"><span style="color:#ABB2BF;">    .</span><span style="color:#61AFEF;">Build</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>最后，启动应用：</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki one-dark-pro" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">Run</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将 Bot 的 QQ 号、密码填入相应空位，运行程序，可能会提示登录验证。按照要求登陆成功后，向 Bot 发送一条消息：</p>`,23),i=s("div",{class:"tip custom-block"},[s("p",{class:"custom-block-title"},"TIP"),s("p",null,"至此你已经完成了第一个小 Bot 的开发！接下来的一节内容中，你将了解到 Flandre 的结构组成，以及各种实体模型的简单介绍。")],-1);function y(d,F,A,u,b,C){const n=c("Badge");return r(),e("div",null,[t,s("ul",null,[s("li",null,[a(n,{text:"发送"}),l(" Hello, Flandre!")]),s("li",null,[a(n,{text:"接收"}),l(" Hello, Flandre!")])]),i])}const g=p(B,[["render",y]]);export{E as __pageData,g as default};
